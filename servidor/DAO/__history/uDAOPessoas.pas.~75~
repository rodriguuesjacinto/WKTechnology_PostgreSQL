unit uDAOPessoas;

interface

uses System.SysUtils, uModelPessoas, uModelEndereco, FireDAC.Comp.Client, uControllerConexao,
System.Generics.Collections, FireDAC.DApt ;

type
  TDAOPessoas = class
  private


  public
    function selecionar(ModelPessoas : TModelPessoas): TFDQuery;
    function incluir (ModelPessoas : TModelPessoas): Boolean;
    function excluir (ModelPessoas : TModelPessoas): Boolean;
    function alterar (ModelPessoas : TModelPessoas): Boolean;
  end;

implementation

{ TDAOPessoas }


function TDAOPessoas.alterar(ModelPessoas: TModelPessoas): Boolean;
var
  Query : TFDQuery ;
  _EnderecoColection : TModelEndereco ;
   listaCeps  : string ;
begin
  try
    TControllerConexao.getInstance().daoConexao.getConexao.StartTransaction ;
    Query := TControllerConexao.getInstance.daoConexao.criarQrery;
    try
      Query.ExecSQL('update pessoa set f1natureza = :f1natureza, dsdocumento = :dsdocumento, nmprimeiro = :nmprimeiro , nmsegundo = :nmsegundo  where idpessoa = :idpessoa',
                        [ModelPessoas.f1natureza, ModelPessoas.dsdocumento, ModelPessoas.nmprimeiro, ModelPessoas.nmsegundo, ModelPessoas.idpessoa]
                       ) ;

       //Estou fazendo o tratamento dos CEP aqui para envolver em uma unica Transaction
       listaCeps := '' ;
       for _EnderecoColection in ModelPessoas.dscep do
       begin
           if listaCeps <> ''  then
             listaCeps := listaCeps + ' , ' ;
           listaCeps := listaCeps + QuotedStr( _EnderecoColection.dscep ) ;
       end;
       Query.ExecSQL('delete from endereco e where e.idpessoa = :idpessoa and e.dscep not in ('+ listaCeps +')',[ModelPessoas.idpessoa])  ;

       for _EnderecoColection in ModelPessoas.dscep do
       begin
          Query.ExecSQL('insert into endereco (idpessoa,dscep) SELECT :_idpessoa,:_dscep where not exists (select e.idpessoa, e.dscep from endereco e where e.idpessoa = :_idpessoa and e.dscep = :_dscep )',
                        [ModelPessoas.idpessoa,_EnderecoColection.dscep ])  ;
       end;

    finally
      FreeAndNil(Query) ;
    end;

    TControllerConexao.getInstance().daoConexao.getConexao.Commit ;
    result := true ;
  except
    TControllerConexao.getInstance().daoConexao.getConexao.Rollback ;
    result := false ;
  end;
end;

function TDAOPessoas.excluir(ModelPessoas: TModelPessoas): Boolean;
var
  Query : TFDQuery ;
begin
  try
    TControllerConexao.getInstance().daoConexao.getConexao.StartTransaction ;

    Query := TControllerConexao.getInstance.daoConexao.criarQrery;
    try
      Query.ExecSQL('delete from pessoa where idpessoa = :idpessoa',[ModelPessoas.idpessoa]) ;
    finally
      FreeAndNil(Query) ;
    end;

    TControllerConexao.getInstance().daoConexao.getConexao.Commit ;
    result := true ;
  except
    TControllerConexao.getInstance().daoConexao.getConexao.Rollback ;
    result := false ;
  end;
end;

function TDAOPessoas.incluir(ModelPessoas: TModelPessoas): Boolean;
var
  Query : TFDQuery ;
  _EnderecoColection : TModelEndereco ;
  sqlBuscaID : String  ;
begin
  try
      { select LAST_INSERT_ID() mysql | RETURNING idpessoa PostGres }
      if TControllerConexao.getInstance().daoConexao.getGDBdefault = 'MySQL' then
         sqlBuscaID := '; select LAST_INSERT_ID();'  else sqlBuscaID := ' RETURNING idpessoa;' ;

     TControllerConexao.getInstance().daoConexao.getConexao.StartTransaction ;
    Query := TControllerConexao.getInstance.daoConexao.criarQrery;
    try

      Query.Open('insert into pessoa (f1natureza,dsdocumento,nmprimeiro,nmsegundo,dtregistro) values (:f1natureza,:dsdocumento,:nmprimeiro,:nmsegundo,CURRENT_DATE)' + sqlBuscaID ,
                        [ModelPessoas.f1natureza, ModelPessoas.dsdocumento, ModelPessoas.nmprimeiro, ModelPessoas.nmsegundo]
                ) ;
       ModelPessoas.idpessoa := Query.Fields[0].AsInteger ;

       for _EnderecoColection in ModelPessoas.dscep do
       begin
          Query.ExecSQL('insert into endereco (idpessoa,dscep) SELECT :_idpessoa,:_dscep where not exists (select e.idpessoa, e.dscep from endereco e where e.idpessoa = :_idpessoa and e.dscep = :_dscep )',
                        [ModelPessoas.idpessoa,_EnderecoColection.dscep ])  ;
       end;
    finally
      FreeAndNil(Query) ;
    end;

    TControllerConexao.getInstance().daoConexao.getConexao.Commit   ;
    result := true ;
  except
    TControllerConexao.getInstance().daoConexao.getConexao.Rollback ;
    result := false ;
  end;
end;

function TDAOPessoas.selecionar(ModelPessoas : TModelPessoas): TFDQuery;
var
  QuerySelecionar : TFDQuery ;
  nTotalRegistros : Integer  ;
begin
  QuerySelecionar := TControllerConexao.getInstance.daoConexao.criarQrery;
  QuerySelecionar.Open('select count(*) as nTotalRegistros from pessoa') ;
  nTotalRegistros := QuerySelecionar.FieldByName('nTotalRegistros').AsInteger ;
  if ModelPessoas.idpessoa > 0   then
     QuerySelecionar.Open('select * , 1 as nTotalRegistros from pessoa where idclientes = :idclientes',[ModelPessoas.idpessoa])
  else
     QuerySelecionar.Open('select * from pessoa LIMIT 10 OFFSET(:pagina - 1) * 10',[ModelPessoas.pagina]) ;
  result := QuerySelecionar ;
end;

end.
